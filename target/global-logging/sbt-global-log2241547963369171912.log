[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\bakar\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\bakar\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Oracle Corporation Java 1.8.0_231)
[debug]       Load.loadUnit: plugins took 379.5368ms
[debug]       Load.loadUnit: defsScala took 0.4774ms
[debug] [Loading] Scanning directory C:\Users\bakar\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\bakar\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 34.401 ms
[debug]           Load.resolveProject(global-plugins) took 77.0162ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\bakar\.sbt\1.0\plugins, plugins: List(<none>))) took 156.9132ms
[debug] [Loading] Done in C:\Users\bakar\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 193.8655ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3066ms
[debug]     Load.loadUnit(file:/C:/Users/bakar/.sbt/1.0/plugins/, ...) took 586.6869ms
[debug]   Load.apply: load took 1061.5712ms
[debug]   Load.apply: resolveProjects took 9.1053ms
[debug]   Load.apply: finalTransforms took 91.6751ms
[debug]   Load.apply: config.delegates took 13.6096ms
[debug]   Load.apply: Def.make(settings)... took 780.7623ms
[debug]   Load.apply: structureIndex took 199.1132ms
[debug]   Load.apply: mkStreams took 3.2668ms
[info] loading global plugins from C:\Users\bakar\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 5720.0598ms
[debug]           Load.loadUnit: plugins took 48.6545ms
[debug]           Load.loadUnit: defsScala took 0.0067ms
[debug] [Loading] Scanning directory C:\Users\bakar\Bureau\CodeChallengeBelieve\project
[debug]             Load.loadUnit: mkEval took 15.4131ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\bakar\Bureau\CodeChallengeBelieve\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.6402 ms
[info] loading settings for project codechallengebelieve-build from idea.sbt ...
[debug]               Load.resolveProject(codechallengebelieve-build) took 4.2761ms
[debug]             Load.loadTransitive: finalizeProject(Project(id codechallengebelieve-build, base: C:\Users\bakar\Bureau\CodeChallengeBelieve\project, plugins: List(<none>))) took 7.7048ms
[debug] [Loading] Done in C:\Users\bakar\Bureau\CodeChallengeBelieve\project, returning: (codechallengebelieve-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 4498.3605ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.4463ms
[debug]         Load.loadUnit(file:/C:/Users/bakar/Bureau/CodeChallengeBelieve/project/, ...) took 4555.4613ms
[debug]       Load.apply: load took 4557.6806ms
[debug]       Load.apply: resolveProjects took 0.1456ms
[debug]       Load.apply: finalTransforms took 15.5438ms
[debug]       Load.apply: config.delegates took 0.7566ms
[debug]       Load.apply: Def.make(settings)... took 121.0503ms
[debug]       Load.apply: structureIndex took 44.4429ms
[debug]       Load.apply: mkStreams took 0.0051ms
[info] loading project definition from C:\Users\bakar\Bureau\CodeChallengeBelieve\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 11859.5896ms
[debug]     Load.loadUnit: defsScala took 0.0048ms
[debug] [Loading] Scanning directory C:\Users\bakar\Bureau\CodeChallengeBelieve
[debug]       Load.loadUnit: mkEval took 0.8334ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.6106 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 73.2891ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\bakar\Bureau\CodeChallengeBelieve, plugins: List(<none>))) took 80.7759ms
[debug] [Loading] Done in C:\Users\bakar\Bureau\CodeChallengeBelieve, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2890.367ms
[debug]     Load.loadUnit: cleanEvalClasses took 21.7242ms
[debug]   Load.loadUnit(file:/C:/Users/bakar/Bureau/CodeChallengeBelieve/, ...) took 14772.7396ms
[debug] Load.apply: load took 14775.6714ms
[debug] Load.apply: resolveProjects took 0.4468ms
[debug] Load.apply: finalTransforms took 35.0861ms
[debug] Load.apply: config.delegates took 0.4157ms
[debug] Load.apply: Def.make(settings)... took 120.1326ms
[debug] Load.apply: structureIndex took 37.7375ms
[debug] Load.apply: mkStreams took 0.003ms
[info] set current project to CodeChallengeBelieve (in build file:/C:/Users/bakar/Bureau/CodeChallengeBelieve/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 61389 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 61389, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to CodeChallengeBelieve (in build file:/C:/Users/bakar/Bureau/CodeChallengeBelieve/)
[debug] > Exec(idea-shell, None, None)
